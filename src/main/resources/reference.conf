akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = on

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    transport-failure-detector {
      heartbeat-interval = 4 s   # default 4s
      acceptable-heartbeat-pause = 10 s  # default 10s
    }
  }
  cluster {
    auto-down-unreachable-after = off
    metrics.enabled = off
    failure-detector {
      acceptable-heartbeat-pause = 6 s # default 3 s
      threshold = 12.0    # default 8.0
    }
    scheduler {
      # make it less than system's tick-duration to force start a new one
      tick-duration = 9 ms # default 33ms
      ticks-per-wheel = 512 # default 512
    }
    use-dispatcher = cluster-dispatcher
  }
  contrib.cluster.pub-sub.gossip-interval = 3s  # default 1s
}

akka.actor {
  serializers {
    avro = "wandou.astore.serializer.AvroSerializer"
  }
  serialization-bindings {
    "org.apache.avro.generic.GenericData$Record" = avro
    "org.apache.avro.generic.GenericRecord" = avro
  }
}

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}

akka.remote.netty.tcp {
  hostname = "127.0.0.1"
  port = 2554
}
akka.cluster.seed-nodes = ["akka.tcp://AStoreSystem@127.0.0.1:2554", "akka.tcp://AStoreSystem@127.0.0.1:2555"]

akka.cluster.roles = ["entity"]
akka.contrib.cluster.sharding.role  = "entity"


akka.persistence.journal.leveldb.dir = "target/journal"
akka.persistence.snapshot-store.local.dir = "target/snapshots"
akka.persistence.journal.leveldb.native = off

web {
  hostname = "127.0.0.1"
  port = 8080
}
